/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options (nf-core):
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.out}/${meta}/${task.process.replace(':', '/').toLowerCase()}/${meta}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    ]

    withName: '.*PREPARE_GENOMES:.*' {
        publishDir = [
            path: { "${params.out}/${meta}/prepare_genomes/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*AB_INITIO:.*' {
        publishDir = [
            path: { "${params.out}/${meta}/ab_initio/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*HRP:.*' {
        publishDir = [
            path: { "${params.out}/${meta}/HRP/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:RUN_BAMBU:.*' {
        publishDir = [
            path: { "${params.out}/${meta}/bambu/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:RUN_TRINITY:.*' {
        publishDir = [
            path: { "${params.out}/${meta}/trinity/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE:AGAT_GXF2GFF.*' {
        publishDir = [
            path: { "${params.out}/${meta}/evidencemodeler/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE:EV_MODELER.*' {
        publishDir = [
            path: { "${params.out}/${meta}/evidencemodeler/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE:GET_R_GENES.*' {
        publishDir = [
            path: { "${params.out}/${meta}/r_genes/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE:BLAST.*' {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/blast/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE:FUNCTIONAL.*' {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE:TRANSPOSONS.*' {
        publishDir = [
            path: { "${params.out}/${meta}/transposons/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*ANNOTATE:PASA.*' {
        publishDir = [
            path: { "${params.out}/${meta}/pasa/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: PASA_UPDATE {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/pasa_update/iteration1" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: PASA_UPDATE_2 {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/pasa_update/iteration2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: PASA_UPDATE_3 {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/pasa_update/iteration3" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: AGAT_COMPLEMENT_UPDATE1 {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/pasa_update/iteration1" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: AGAT_COMPLEMENT_UPDATE2 {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/pasa_update/iteration2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: AGAT_COMPLEMENT_UPDATE3 {
        publishDir = [
            path: { "${params.out}/${meta}/functional_annotation/pasa_update/iteration3" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
